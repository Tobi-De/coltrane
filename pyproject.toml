[project]
name = "coltrane"
authors = [
  {name = "Adam Hill", email = "adam@adamghill.com"}
]
version = "0.36.0"
description = "A minimal app framework for content sites ðŸŽµ"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8,<4.0"
keywords = [
  "django",
  "python",
  "static",
  "markdown"
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "Django >= 3.0",
  "python-dotenv > 0.17",
  "click >= 8",
  "dateparser >= 1",
  "mistune >= 3",
  "python-frontmatter >= 1",
  "pygments >= 2.7.3",
  "minestrone >= 0.6.2",
  "halo < 1",
  "rich-click < 2",
  "django-fastdev < 2",
  "django-browser-reload < 2",
  "pywatchman",
  "msgspec < 1",
  "click-aliases < 2"
]

[project.urls]
Homepage = "https://github.com/adamghill/coltrane"
Documentation = "https://github.com/adamghill/coltrane"
Repository = "https://github.com/adamghill/coltrane.git"
Issues = "https://github.com/adamghill/coltrane/discussions"
Changelog = "https://github.com/adamghill/coltrane/blob/master/CHANGELOG.md"

[project.scripts]
coltrane = "coltrane.console:cli"

[project.optional-dependencies]
deploy = [
  "gunicorn",
  "whitenoise"
]
compressor = [
  "django-compressor < 5"
]
json5 = [
  "pyjson5"
]
angles = [
  "dj-angles"
]
unicorn = [
  "django-unicorn"
]
docs = [
  "Sphinx",
  "linkify-it-py",
  "myst-parser",
  "furo",
  "sphinx-copybutton",
  "sphinx-autobuild",
  "toml",
  "attrs",
  "sphinx-inline-tabs"
]

[tool.uv]
dev-dependencies = [
  "coverage[toml]",
  "pytest-cov",
  "pytest",
  "pytest-django",
  "pytest-pretty",
  "django-stubs",
  "types-toml",
  "types-dateparser"
]

[tool.ruff]
src = ["coltrane"]
exclude = []
target-version = "py38"
line-length = 120
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore unused variables
  "F841",
   # Ignore exception strings
  "EM101", "EM102",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["coltrane"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "ARG001"]

[tool.pytest.ini_options]
addopts = "--quiet --failed-first --reuse-db --nomigrations -p no:warnings -m 'not slow'"
testpaths = [
    "tests"
]
markers = [
    "slow: marks tests as slow",
]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true
sort = "cover"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"